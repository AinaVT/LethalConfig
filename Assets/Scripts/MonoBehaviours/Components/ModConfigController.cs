using System.Collections.Generic;
using LethalConfig.ConfigItems;
using LethalConfig.ConfigItems.Options;
using LethalConfig.MonoBehaviours.Managers;
using LethalConfig.Utils;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace LethalConfig.MonoBehaviours.Components
{
    internal abstract class ModConfigController : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler
    {
        public delegate void OnHoverHandler();

        public TextMeshProUGUI nameTextComponent;
        public TooltipTrigger tooltipTrigger;
        private readonly List<Selectable> _selectables = new();

        protected BaseConfigItem BaseConfigItem;

        protected bool IsOnSetup;

        private CanModifyResult CanModify
        {
            get
            {
                if (BaseConfigItem.Options.CanModifyCallback is null)
                    return true;

                return BaseConfigItem.Options.CanModifyCallback.Invoke();
            }
        }

        protected virtual void Awake()
        {
            tooltipTrigger.enabled = false;

            if (_selectables.Count > 0)
                return;

            _selectables.AddRange(GetComponentsInChildren<Selectable>());
        }

        public void OnPointerEnter(PointerEventData eventData)
        {
            OnHoverEnter?.Invoke();
        }

        public void OnPointerExit(PointerEventData eventData)
        {
            OnHoverExit?.Invoke();
        }

        public event OnHoverHandler OnHoverEnter;
        public event OnHoverHandler OnHoverExit;

        public virtual bool SetConfigItem(BaseConfigItem configItem)
        {
            BaseConfigItem = configItem;
            IsOnSetup = true;
            OnSetConfigItem();
            IsOnSetup = false;

            if (BaseConfigItem.Options.CanModifyCallback is not null)
                tooltipTrigger.tooltipText =
                    $"<b>Modifying this entry is currently disabled:</b>\n<b>{CanModify.Reason}</b>";

            return true;
        }

        protected abstract void OnSetConfigItem();

        public virtual void UpdateAppearance()
        {
            nameTextComponent.text = $"{(BaseConfigItem.HasValueChanged ? "* " : "")}{BaseConfigItem.Name}";

            var canModify = CanModify;
            foreach (var selectable in _selectables)
                selectable.interactable = canModify;

            tooltipTrigger.enabled = !canModify;
        }

        public virtual void ResetToDefault()
        {
            ConfigMenuManager.Instance.menuAudio.PlayConfirmSfx();
            BaseConfigItem.ChangeToDefault();
            UpdateAppearance();
        }

        public virtual string GetDescription()
        {
            var description = $"<b>{BaseConfigItem.Name}</b>";

            if (BaseConfigItem.IsAutoGenerated)
                description += "\n\n<b>*This config entry was automatically generated and may require a restart*</b>";
            else if (BaseConfigItem.RequiresRestart) description += "\n\n<b>*REQUIRES RESTART*</b>";

            return description + $"\n\n{BaseConfigItem.Description}";
        }
    }

    internal abstract class ModConfigController<T, V> : ModConfigController where T : BaseValueConfigItem<V>
    {
        protected T ConfigItem => (T)BaseConfigItem;

        private void OnDestroy()
        {
            ConfigItem.OnCurrentValueChanged -= OnCurrentValueChanged;
        }

        public override string GetDescription()
        {
            return $"{base.GetDescription()}\n\nDefault: {ConfigItem.DefaultValue}";
        }

        public override bool SetConfigItem(BaseConfigItem configItem)
        {
            if (configItem is not T item)
            {
                LogUtils.LogError(
                    $"Expected config item of type {typeof(T).Name}, but got {configItem.GetType().Name} instead.");
                return false;
            }

            item.OnCurrentValueChanged += OnCurrentValueChanged;

            return base.SetConfigItem(item);
        }

        private void OnCurrentValueChanged()
        {
            UpdateAppearance();
        }
    }
}