using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using BepInEx.Bootstrap;
using BepInEx.Configuration;
using LethalConfig.ConfigItems;
using LethalConfig.Utils;

namespace LethalConfig.AutoConfig
{
    internal static class AutoConfigGenerator
    {
        public static AutoConfigItem[] AutoGenerateConfigs(params ConfigFileAssemblyPair[] customConfigFiles)
        {
            var configItems = new List<AutoConfigItem>();
            var generatedConfigFiles = new List<ConfigFile>();

            var plugins = Chainloader.PluginInfos.Values.ToList();

            LogUtils.LogDebug($"{plugins.Count} mods loaded: {string.Join(";", plugins.Select(p => p.Metadata.GUID))}");

            foreach (var plugin in plugins)
            {
                LogUtils.LogDebug($"{plugin.Metadata.GUID} : {plugin.Metadata.Name} : {plugin.Metadata.Version}");
                var info = plugin.Metadata;

                try
                {
                    var assembly = Assembly.GetAssembly(plugin.Instance.GetType());

                    var pluginConfigItems = AutoGenerateConfigsForFile(new ConfigFileAssemblyPair
                    {
                        ConfigFile = plugin.Instance.Config,
                        Assembly = assembly
                    });
                    configItems.AddRange(pluginConfigItems);

                    generatedConfigFiles.Add(plugin.Instance.Config);
                }
                catch (Exception)
                {
                    LogUtils.LogWarning($"Invalid instance for \"{info.Name}\" plugin. Skipping.");
                }
            }

            foreach (var customConfigFile in customConfigFiles)
            {
                if (generatedConfigFiles.Contains(customConfigFile.ConfigFile))
                {
                    LogUtils.LogWarning(
                        $"Custom config file provided was already auto generated ({customConfigFile.ConfigFile.ConfigFilePath})");
                    continue;
                }

                var customConfigFileItems = AutoGenerateConfigsForFile(customConfigFile);
                configItems.AddRange(customConfigFileItems);

                generatedConfigFiles.Add(customConfigFile.ConfigFile);
            }

            return configItems.ToArray();
        }

        private static IEnumerable<AutoConfigItem> AutoGenerateConfigsForFile(ConfigFileAssemblyPair configAssemblyPair)
        {
            var configItems = new List<AutoConfigItem>();
            var configs = configAssemblyPair.ConfigFile.Select(c => c.Value);

            foreach (var config in configs)
            {
                var configItem = GenerateConfigForEntry(config);

                if (configItem != null)
                {
                    configItem.IsAutoGenerated = true;
                    configItems.Add(new AutoConfigItem
                    {
                        ConfigItem = configItem,
                        Assembly = configAssemblyPair.Assembly
                    });
                }
                else
                {
                    LogUtils.LogWarning(
                        $"No UI component found for config of type {config.SettingType.Name} ({config.Definition.Section}/{config.Definition.Key})");
                }
            }

            return configItems.ToArray();
        }

        private static BaseConfigItem GenerateConfigForEntry(ConfigEntryBase configEntryBase)
        {
            var type = configEntryBase.SettingType;
            if (type.IsEquivalentTo(typeof(int))) return GenerateItemForInt(configEntryBase);

            if (type.IsEquivalentTo(typeof(float))) return GenerateItemForFloat(configEntryBase);

            if (type.IsEquivalentTo(typeof(bool))) return GenerateItemForBool(configEntryBase);

            if (type.IsEquivalentTo(typeof(string))) return GenerateItemForString(configEntryBase);

            return type.IsEnum ? GenerateItemForEnum(configEntryBase) : null;
        }

        private static BaseConfigItem GenerateItemForInt(ConfigEntryBase configEntryBase)
        {
            var configEntry = (ConfigEntry<int>)configEntryBase;

            if (configEntry.Description?.AcceptableValues is AcceptableValueRange<int>)
                return new IntSliderConfigItem(configEntry);

            return new IntInputFieldConfigItem(configEntry);
        }

        private static BaseConfigItem GenerateItemForFloat(ConfigEntryBase configEntryBase)
        {
            var configEntry = (ConfigEntry<float>)configEntryBase;

            if (configEntry.Description?.AcceptableValues is AcceptableValueRange<float>)
                return new FloatSliderConfigItem(configEntry);

            return new FloatInputFieldConfigItem(configEntry);
        }

        private static BaseConfigItem GenerateItemForBool(ConfigEntryBase configEntryBase)
        {
            var configEntry = (ConfigEntry<bool>)configEntryBase;
            return new BoolCheckBoxConfigItem(configEntry);
        }

        private static BaseConfigItem GenerateItemForString(ConfigEntryBase configEntryBase)
        {
            var configEntry = (ConfigEntry<string>)configEntryBase;

            if (configEntry.Description?.AcceptableValues is AcceptableValueList<string>)
                return new TextDropDownConfigItem(configEntry); //Make strings with acceptablevalues dropdowns by default

            string defaultValue = configEntry.DefaultValue.ToString();

            if (defaultValue.StartsWith("#") && defaultValue.Length == 7)
            {
                return new HexColorInputFieldConfigItem(configEntry);
            }

            return new TextInputFieldConfigItem(configEntry);
        }

        private static BaseConfigItem GenerateItemForEnum(ConfigEntryBase configEntryBase)
        {
            var enumType = configEntryBase.SettingType;
            var componentType = typeof(EnumDropDownConfigItem<>).MakeGenericType(enumType);
            var instance = Activator.CreateInstance(componentType, configEntryBase, true);
            return (BaseConfigItem)instance;
        }

        public struct AutoConfigItem
        {
            public BaseConfigItem ConfigItem { get; set; }
            public Assembly Assembly { get; set; }
        }

        public struct ConfigFileAssemblyPair
        {
            public ConfigFile ConfigFile { get; set; }
            public Assembly Assembly { get; set; }
        }
    }
}